
PS C:\Users\User> mongo
MongoDB shell version v5.0.9
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("b7690208-62c3-475f-9096-18a30af3fcdd") }
MongoDB server version: 5.0.9
================
Warning: the "mongo" shell has been superseded by "mongosh",
which delivers improved usability and compatibility.The "mongo" shell has been deprecated and will be removed in
an upcoming release.
For installation instructions, see
https://docs.mongodb.com/mongodb-shell/install/
================
---
The server generated these startup warnings when booting:
        2022-06-10T19:24:33.299+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> show dbs;
admin           0.000GB
config          0.000GB
local           0.000GB
mongo_practice  0.000GB
> use mongo_practice;
switched to db mongo_practice
> db;
mongo_practice
> show collections;
movies
> db.movies.find().pretty();
{
        "_id" : ObjectId("62a3744b16b7051db7df7587"),
        "title" : "Fight Club",
        "writer" : "Chunk Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a3753216b7051db7df7588"),
        "title" : "Pulp fiction",
        "writer" : "Quention Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62a375cf16b7051db7df7589"),
        "title" : "Inglorious",
        "writer" : "Quention Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
{
        "_id" : ObjectId("62a379d716b7051db7df758d"),
        "title" : "Pee we Herman's Big Adventure"
}
{ "_id" : ObjectId("62a37a0b16b7051db7df758e"), "title" : "Avatar" }
> db.movies.find().pretty()
{
        "_id" : ObjectId("62a3744b16b7051db7df7587"),
        "title" : "Fight Club",
        "writer" : "Chunk Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a3753216b7051db7df7588"),
        "title" : "Pulp fiction",
        "writer" : "Quention Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62a375cf16b7051db7df7589"),
        "title" : "Inglorious",
        "writer" : "Quention Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
{
        "_id" : ObjectId("62a379d716b7051db7df758d"),
        "title" : "Pee we Herman's Big Adventure"
}
{ "_id" : ObjectId("62a37a0b16b7051db7df758e"), "title" : "Avatar" }
> db.movies.find({'writer':'Quention Tarantino'})
{ "_id" : ObjectId("62a3753216b7051db7df7588"), "title" : "Pulp fiction", "writer" : "Quention Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("62a375cf16b7051db7df7589"), "title" : "Inglorious", "writer" : "Quention Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
>
> db.movies.find({'actors':'Brad Pitt'})
{ "_id" : ObjectId("62a3744b16b7051db7df7587"), "title" : "Fight Club", "writer" : "Chunk Palahniuko", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("62a375cf16b7051db7df7589"), "title" : "Inglorious", "writer" : "Quention Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
>
> db.movies.find({'franchise':'The Hobbit'}).pretty()
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
> db.movies.find({'year':1990}).pretty()
> db.movies.find({'year':199}).pretty()
> db.movies.find({'year':{$gt: 1990, $lt: 2000}}).pretty()
{
        "_id" : ObjectId("62a3744b16b7051db7df7587"),
        "title" : "Fight Club",
        "writer" : "Chunk Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a3753216b7051db7df7588"),
        "title" : "Pulp fiction",
        "writer" : "Quention Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
> db.movies.find({'year':{$lt: 2000, $gt: 2010}}).pretty()
>
> db.movies.find({'year':{$range:[0, 2000], $range:[ 2010,3000]}}).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown operator: $range",
        "code" : 2,
        "codeName" : "BadValue"
}
>  db.movies.find({$or: [{year: {$lt: 2000}}, {year: {$gt: 2010}}]})
{ "_id" : ObjectId("62a3744b16b7051db7df7587"), "title" : "Fight Club", "writer" : "Chunk Palahniuko", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("62a3753216b7051db7df7588"), "title" : "Pulp fiction", "writer" : "Quention Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("62a3771116b7051db7df758a"), "title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("62a3776b16b7051db7df758b"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : 2013, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("62a3790916b7051db7df758c"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness." }
>
> db.movies.find({$or: [{year: {$lt: 2000}}, {year: {$gt: 2010}}]}).pretty()
{
        "_id" : ObjectId("62a3744b16b7051db7df7587"),
        "title" : "Fight Club",
        "writer" : "Chunk Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a3753216b7051db7df7588"),
        "title" : "Pulp fiction",
        "writer" : "Quention Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
>
> db.movies.update({title:"The Hobbit: An Unexpected Journey"},{ $set: { "synopsis": "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }}).pretty()
uncaught exception: TypeError: db.movies.update(...).pretty is not a function :
@(shell):1:1
> db.movies.update({'title':'The Hobbit: An Unexpected Journey'},{$set:{'synopsis':'A relutant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
> db.movies.update({'title':'The Hobbit: An Unexpected Journey'},{$set:{'synopsis':'A relutant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
>
> db.movies.update({ title : 'The Hobbit : The Desolation of Smaug' },
... ... {
... ... $set : {
... ... 'synopsis' : 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
... ... }}
... ... )db.movies.update({ title : 'The Hobbit : The Desolation of Smaug' },
... ... {
... ... $set : {
... ... 'synopsis' : 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
... ... }}
... ... )
uncaught exception: SyntaxError: unexpected token: identifier :
@(shell):6:1
> db.movies.update({ title : 'The Hobbit : The Desolation of Smaug' },
... ... {
... ... $set : {
... ... 'synopsis' : 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
... ... }}
... ... )
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.movies.update({ title : 'The Hobbit : The Desolation of Smaug' }, { $set : { 'synopsis' : 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.' }} )
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
>
> db.movies.updateOne({title : 'Pulp Fiction'},
... ... {
... ... $push : {
... ... actors : 'Semuel L. Jaction'}
... ... }
... ... )
{ "acknowledged" : true, "matchedCount" : 0, "modifiedCount" : 0 }
>
>
> db.movies.find().pretty()
{
        "_id" : ObjectId("62a3744b16b7051db7df7587"),
        "title" : "Fight Club",
        "writer" : "Chunk Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a3753216b7051db7df7588"),
        "title" : "Pulp fiction",
        "writer" : "Quention Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("62a375cf16b7051db7df7589"),
        "title" : "Inglorious",
        "writer" : "Quention Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relutant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug"
}
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
{
        "_id" : ObjectId("62a379d716b7051db7df758d"),
        "title" : "Pee we Herman's Big Adventure"
}
{ "_id" : ObjectId("62a37a0b16b7051db7df758e"), "title" : "Avatar" }
>
>  db.movies.updateOne({title : 'Pulp Fiction'},
... ... {
... ... $push : {
... ... actors : 'Semuel L. Jaction'}
... ... }
... ... ) db.movies.updateOne({title : 'Pulp Fiction'},
... ... {
... ... $push : {
... ... actors : 'Semuel L. Jaction'}
... ... }
... ... )
uncaught exception: SyntaxError: unexpected token: identifier :
@(shell):6:2
>  db.movies.updateOne({title : 'Pulp Fiction'},
... ... {
... ... $push : {
... ... actors : 'Semuel L. Jaction'}
... ... }
... ... )
{ "acknowledged" : true, "matchedCount" : 0, "modifiedCount" : 0 }
> db.movies.updateOne({'title':'Pulp fiction'},)
uncaught exception: TypeError: can't convert undefined to object :
DBCollection.prototype.updateOne@src/mongo/shell/crud_api.js:558:20
@(shell):1:1
> db.movies.updateOne({'title':'Pulp fiction'},{$push : { 'actors': 'Semuel L. Jaction'}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
>
> db.movies.find().pretty()
{
        "_id" : ObjectId("62a3744b16b7051db7df7587"),
        "title" : "Fight Club",
        "writer" : "Chunk Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a3753216b7051db7df7588"),
        "title" : "Pulp fiction",
        "writer" : "Quention Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman",
                "Semuel L. Jaction"
        ]
}
{
        "_id" : ObjectId("62a375cf16b7051db7df7589"),
        "title" : "Inglorious",
        "writer" : "Quention Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relutant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug"
}
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
{
        "_id" : ObjectId("62a379d716b7051db7df758d"),
        "title" : "Pee we Herman's Big Adventure"
}
{ "_id" : ObjectId("62a37a0b16b7051db7df758e"), "title" : "Avatar" }
>
> db.movies.update({'title:'The Desolation of Smaug'},
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:26
> db.movies.update({'title':'The Desolation of Smaug'},
... {$set: {'synopsis': 'A reluctant Hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug.'}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
>
> db.movies.update({'title':'The Hobbit: Desolation of Smaug'}, {$set: {'synopsis': 'A reluctant Hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug.'}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
>
>  db.movies.update({title:"The Hobbit: The Desolation of Smaug"},{ $set: { "synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }}) db.movies.update({title:"The Hobbit: The Desolation of Smaug"},{ $set: { "synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }})
uncaught exception: SyntaxError: unexpected token: identifier :
@(shell):1:284
>
>
> db.movies.find({$contains:{"synopsis":"Bilbo"}})
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $contains. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({"synopsis": {$regex: "Bilbo"}})
{ "_id" : ObjectId("62a3771116b7051db7df758a"), "title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A relutant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug" }
{ "_id" : ObjectId("62a3790916b7051db7df758c"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness." }
>
>
> db.movies.find({"synopsis": {$regex: "Bilbo"}}).pretty()
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relutant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug"
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
>
> db.movies.find({"synopsis": {$regex: "Gandalf"}})
> db.movies.update({'title': 'The Hobbit: The Desolation of Smaug'},
... {$set: {'synopsis': 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim  Erebor, their homeland, from Smaug.Bilbo Baggins is in possession of a mysterious and magical ring.'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.movies.find({"synopsis": {$regex: "Gandalf"}})
{ "_id" : ObjectId("62a3776b16b7051db7df758b"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim  Erebor, their homeland, from Smaug.Bilbo Baggins is in possession of a mysterious and magical ring." }
>
>
> db.movies.find({"synopsis": {$regex: "Gandalf"}}).pretty()
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim  Erebor, their homeland, from Smaug.Bilbo Baggins is in possession of a mysterious and magical ring."
}
>
> db.movies.find( { $text: { $search: "Gandalf" } } )
Error: error: {
        "ok" : 0,
        "errmsg" : "text index required for $text query",
        "code" : 27,
        "codeName" : "IndexNotFound"
}
>
> db.movies.find( { $text: { $synopsis: "Gandalf" } } )
Error: error: {
        "ok" : 0,
        "errmsg" : "Missing expected field \"$search\"",
        "code" : 4,
        "codeName" : "NoSuchKey"
}
> db.movies.find({ "synopsis": {"$in": ["dwarves", "hobit"] }})
> db.movies.find({ "synopsis": {"$in": ["dwarves", "hobbit"] }})
> db.movies.find({ "synopsis": {"$regex": {"dwarves", "hobbit"} }})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:50
> db.movies.find({ "synopsis": {$regex: {"dwarves", "hobbit"} }})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:48
>
>
> db.movies.find({"synopsis": {$regex: "Bilbo"}, {$ne: "Gandalf"}}).pretty()
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:47
> db.movies.find({"synopsis": {$regex: "Bilbo"}, "synopsis": {$ne: "Gandalf"}}).pretty()
{
        "_id" : ObjectId("62a3744b16b7051db7df7587"),
        "title" : "Fight Club",
        "writer" : "Chunk Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a3753216b7051db7df7588"),
        "title" : "Pulp fiction",
        "writer" : "Quention Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman",
                "Semuel L. Jaction"
        ]
}
{
        "_id" : ObjectId("62a375cf16b7051db7df7589"),
        "title" : "Inglorious",
        "writer" : "Quention Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62a3771116b7051db7df758a"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A relutant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug"
}
{
        "_id" : ObjectId("62a3776b16b7051db7df758b"),
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim  Erebor, their homeland, from Smaug.Bilbo Baggins is in possession of a mysterious and magical ring."
}
{
        "_id" : ObjectId("62a3790916b7051db7df758c"),
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of rising darkness."
}
{
        "_id" : ObjectId("62a379d716b7051db7df758d"),
        "title" : "Pee we Herman's Big Adventure"
}
{ "_id" : ObjectId("62a37a0b16b7051db7df758e"), "title" : "Avatar" }
>
> db.movies.find({$and: [{"synopsis": "gold"}, {"synopsis": "dragon"}]})
>
> db.movies.find({ $and: [{"synopsis": "gold"}, {"synopsis": "dragon"}]});
> db.movies.find({ $or : [{"synopsis" : "dwarves"}, {"synopsis" : "hobbit"}]})
>
> db.movies.remove({'title':'Pee Wee Herman's Big Adventure'})
uncaught exception: SyntaxError: missing } after property list :
@(shell):1:42
>
> db.movies.remove({"title':'Pee Wee Herman's Big Adventure"})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:58
>
> db.movies.remove({"title":"Pee Wee Herman's Big Adventure"})
WriteResult({ "nRemoved" : 0 })
>
> db.movies.remove({"title":"Pee we Herman's Big Adventure"})
WriteResult({ "nRemoved" : 1 })
>
> db.movies.remove({"title":"Avatar"})
WriteResult({ "nRemoved" : 1 })
>
>
> db.createCollection('users')
{ "ok" : 1 }
>
>
> db.users.insert({
... "username":"GoodGuyGreg",
... "first_name": "Good Guy",
... "last_name": "Greg"})
WriteResult({ "nInserted" : 1 })
>
> db.users.insert({
... "username":"ScumbagSteve",
... "full_name": [
... {"first":"Scumbag",
... "last":"Steve"}]})
WriteResult({ "nInserted" : 1 })
>
>
> db.createCollection('posts')
{ "ok" : 1 }
>
> db.posts.insert({
... "username":"GoodGuyGreg",
... "title":"Passes out at party",
... "body":"Wakes up early and clean house"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({
... "username":"GoodGuyGreg",
... "title":"Steals your identity",
... "body":"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({
... "username":"GoodGuyGreg",
... "title":"Reports a bug in your code",
... "body":"Sends you a Pull Request"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({
... "username":"ScumbagSteve",
... "title":"Borrows something",
... "body":"Sells it"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({ "username":"ScumbagSteve", "title":"Borrows everything", "body":"The end"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({ "username":"ScumbagSteve", "title":"Forks your repo on github", "body":"Sets to private"})
WriteResult({ "nInserted" : 1 })
>
> db.createCollection('comments')
{ "ok" : 1 }
>
> db.comments.insert({
... "username":"GoodGuyGreg",
... "comment":"Hope you got a good deal!",
... "post":"[post_obj_id]
SyntaxError: "" literal not terminated before end of script :
@(shell):4:21
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'Hope you got a good deal!', 'post':'[post_obj_id] where [post_obj_id] is the ObjecId of the posts document:"Borrows everything"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.remove({"username":"GoodGuyGreg"})
WriteResult({ "nRemoved" : 1 })
>
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'Hope you got a good deal!', 'post':'[post_obj_id] where [post_obj_id] is the ObjecId of the posts document:"Borrows something"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'What's mine is yours!', 'post':'[post_obj_id] where [post_obj_id] is the ObjecId of the posts document:"Borrows everything"'})
SyntaxError: missing } after property list :
@(shell):1:63
>
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'What's mine is yours!', 'post':'[post_obj_id] where [post_obj_id] is the ObjecId of the posts document:"Borrows everything"'})
SyntaxError: missing } after property list :
@(shell):1:63
>
> db.comments.insert({ 'username':'GoodGuyGreg', "comment":"What's mine is yours!", 'post':'[post_obj_id] where [post_obj_id] is the ObjecId of the posts document:"Borrows everything"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({ 'username':'GoodGuyGreg', "comment":"Don't violate the licensing agreement!", 'post':'[post_obj_id] where [post_obj_id] is the ObjecId of the posts document:"Forks your repo on github"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.remove({"username":"GoodGuyGreg"})
WriteResult({ "nRemoved" : 3 })
>
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'Hope you got a good deal!', 'post':'[post_obj_id]','where [post_obj_id] is the ObjecId of the posts document:"Borrows something"'})
SyntaxError: missing : after property id :
@(shell):1:187
>
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'Hope you got a good deal!', 'post':'[post_obj_id]','''where [post_obj_id] is the ObjecId of the posts document:"Borrows something"'''})
SyntaxError: missing : after property id :
@(shell):1:111
>
>
>
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'Hope you got a good deal!', 'post':'[post_obj_id]','where [post_obj_id] is the ObjectId of the posts document':'"Borrows something"'''})
SyntaxError: missing } after property list :
@(shell):1:190
>
> db.comments.insert({ 'username':'GoodGuyGreg', 'comment':'Hope you got a good deal!', 'post':'[post_obj_id]','where [post_obj_id] is the ObjectId of the posts document':'"Borrows something"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({ 'username':'GoodGuyGreg', "comment":"What's mine is yours!", 'post':'[post_obj_id]', 'where [post_obj_id] is the ObjectId of the posts document':'"Borrows everything"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({ 'username':'GoodGuyGreg', "comment":"Don't violate the licensing agreement!", 'post':'[post_obj_id]', 'where [post_obj_id] is the ObjectId of the posts document':'"Forks your repo on github"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({ 'username':'ScumbagSteve', "comment":"It still isn't clean", 'post':'[post_obj_id]', 'where [post_obj_id] is the ObjectId of the posts document':'"Passes out at party"'})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({ 'username':'ScumbagSteve', "comment":"Denied your PR cause I found a hack", 'post':'[post_obj_id]', 'where [post_obj_id] is the ObjectId of the posts document':'"Reports a bug in your code"'})
WriteResult({ "nInserted" : 1 })
>
> db.users.find().pretty()
{
        "_id" : ObjectId("62a5df275e5faf24eee73769"),
        "username" : "GoodGuyGreg",
        "first_name" : "Good Guy",
        "last_name" : "Greg"
}
{
        "_id" : ObjectId("62a5e0245e5faf24eee7376a"),
        "username" : "ScumbagSteve",
        "full_name" : [
                {
                        "first" : "Scumbag",
                        "last" : "Steve"
                }
        ]
}
>
> db.posts.find().()
SyntaxError: missing name after . operator :
@(shell):1:16
> db.posts.find().pretty()
{
        "_id" : ObjectId("62a5e3c55e5faf24eee7376b"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at party",
        "body" : "Wakes up early and clean house"
}
{
        "_id" : ObjectId("62a5e4e95e5faf24eee7376c"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a5e57f5e5faf24eee7376d"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a Pull Request"
}
{
        "_id" : ObjectId("62a5e5e65e5faf24eee7376e"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("62a5e6185e5faf24eee7376f"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("62a5e6585e5faf24eee73770"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
>
> db.posts.find({"username":"GoodGuyGrey"}).pretty()
> db.posts.find({"username":"GoodGuyGreg"}).pretty()
{
        "_id" : ObjectId("62a5e3c55e5faf24eee7376b"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at party",
        "body" : "Wakes up early and clean house"
}
{
        "_id" : ObjectId("62a5e4e95e5faf24eee7376c"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a5e57f5e5faf24eee7376d"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a Pull Request"
}
>
> db.posts.find({"username":"ScumbagSteve"}).pretty()
{
        "_id" : ObjectId("62a5e5e65e5faf24eee7376e"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("62a5e6185e5faf24eee7376f"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("62a5e6585e5faf24eee73770"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
>
> db.comments.find().pretty()
{
        "_id" : ObjectId("62a5eca85e5faf24eee73775"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Borrows something\""
}
{
        "_id" : ObjectId("62a5ed465e5faf24eee73776"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Borrows everything\""
}
{
        "_id" : ObjectId("62a5ed7a5e5faf24eee73777"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Forks your repo on github\""
}
{
        "_id" : ObjectId("62a5ee905e5faf24eee73778"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Passes out at party\""
}
{
        "_id" : ObjectId("62a5ef355e5faf24eee73779"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Reports a bug in your code\""
}
>
>
> db.comments.find({"username":"GoodGuyGreg"}).pretty()
{
        "_id" : ObjectId("62a5eca85e5faf24eee73775"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Borrows something\""
}
{
        "_id" : ObjectId("62a5ed465e5faf24eee73776"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Borrows everything\""
}
{
        "_id" : ObjectId("62a5ed7a5e5faf24eee73777"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Forks your repo on github\""
}
>
> db.comments.find({"username":"ScumbagSteve"}).pretty()
{
        "_id" : ObjectId("62a5ee905e5faf24eee73778"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Passes out at party\""
}
{
        "_id" : ObjectId("62a5ef355e5faf24eee73779"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Reports a bug in your code\""
}
>
> db.comments.find({'where [post_obj_id] is the ObjectId of the posts document':'"Reports a bu in your code"'}).pretty()
> db.comments.find({"where [post_obj_id] is the ObjectId of the posts document":""Reports a bu in your code""}).pretty()
SyntaxError: missing } after property list :
@(shell):1:80
> db.comments.find({'where [post_obj_id] is the ObjectId of the posts document':'"Reports a bug in your code"'}).pretty()
{
        "_id" : ObjectId("62a5ef355e5faf24eee73779"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : "[post_obj_id]",
        "where [post_obj_id] is the ObjectId of the posts document" : "\"Reports a bug in your code\""
}
>
>
> db.comments.drop()
true
>
> db.createCollection('comments')
{ "ok" : 1 }
>
> db.posts.find().pretty()
{
        "_id" : ObjectId("62a5e3c55e5faf24eee7376b"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at party",
        "body" : "Wakes up early and clean house"
}
{
        "_id" : ObjectId("62a5e4e95e5faf24eee7376c"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a5e57f5e5faf24eee7376d"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a Pull Request"
}
{
        "_id" : ObjectId("62a5e5e65e5faf24eee7376e"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("62a5e6185e5faf24eee7376f"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("62a5e6585e5faf24eee73770"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
>
> db.comments.insert({
... "username":"GoodGuyGreg",
... "comment":"Hope you got a good deal!",
... "post": ObjectId("62a5e5e65e5faf24eee7376e")})
WriteResult({ "nInserted" : 1 })
>
> db.comments.remove({"username":"GoodGuyGreg"})
WriteResult({ "nRemoved" : 1 })
>
> db.comments.insertOne({ "username":"GoodGuyGreg", "comment":"Hope you got a good deal!", "post": ObjectId("62a5e5e65e5faf24eee7376e")})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("62a615ee5e5faf24eee7377b")
}
>
> db.comments.insertOne({ "username":"GoodGuyGreg", "comment":"What's mine is yours!", "post":  ObjectId("62a5e6185e5faf24eee7376f")})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("62a616b85e5faf24eee7377c")
}
>
> db.comments.insertOne({ "username":"GoodGuyGreg", "comment":"Don't violate the licensing agreement!", "post":   ObjectId("62a5e6585e5faf24eee73770")})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("62a618c45e5faf24eee7377d")
}
>
> db.comments.insertOne({ "username":"ScumbagSteve", "comment":"It still isn't clean", "post":   ObjectId("62a5e3c55e5faf24eee7376b")})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("62a619735e5faf24eee7377e")
}
>
> db.comments.insertOne({ "username":"ScumbagSteve", "comment":"Denied your PR cause I found a hack", "post":  ObjectId("62a5e57f5e5faf24eee7376d")})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("62a61a0b5e5faf24eee7377f")
}
>
> db.users.find()
{ "_id" : ObjectId("62a5df275e5faf24eee73769"), "username" : "GoodGuyGreg", "first_name" : "Good Guy", "last_name" : "Greg" }
{ "_id" : ObjectId("62a5e0245e5faf24eee7376a"), "username" : "ScumbagSteve", "full_name" : [ { "first" : "Scumbag", "last" : "Steve" } ] }
> db.posts.find()
{ "_id" : ObjectId("62a5e3c55e5faf24eee7376b"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and clean house" }
{ "_id" : ObjectId("62a5e4e95e5faf24eee7376c"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("62a5e57f5e5faf24eee7376d"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a Pull Request" }
{ "_id" : ObjectId("62a5e5e65e5faf24eee7376e"), "username" : "ScumbagSteve", "title" : "Borrows something", "body" : "Sells it" }
{ "_id" : ObjectId("62a5e6185e5faf24eee7376f"), "username" : "ScumbagSteve", "title" : "Borrows everything", "body" : "The end" }
{ "_id" : ObjectId("62a5e6585e5faf24eee73770"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "Sets to private" }
>
> db.posts.find({"user":"GoodGuyGreg"})
> db.posts.find({"username":"GoodGuyGreg"})
{ "_id" : ObjectId("62a5e3c55e5faf24eee7376b"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and clean house" }
{ "_id" : ObjectId("62a5e4e95e5faf24eee7376c"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("62a5e57f5e5faf24eee7376d"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a Pull Request" }
>
> db.post.find({"username":"ScumbagSteve"})
> db.posts.find({"username":"ScumbagSteve"})
{ "_id" : ObjectId("62a5e5e65e5faf24eee7376e"), "username" : "ScumbagSteve", "title" : "Borrows something", "body" : "Sells it" }
{ "_id" : ObjectId("62a5e6185e5faf24eee7376f"), "username" : "ScumbagSteve", "title" : "Borrows everything", "body" : "The end" }
{ "_id" : ObjectId("62a5e6585e5faf24eee73770"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "Sets to private" }
>
> db.comments.find()
{ "_id" : ObjectId("62a615ee5e5faf24eee7377b"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("62a5e5e65e5faf24eee7376e") }
{ "_id" : ObjectId("62a616b85e5faf24eee7377c"), "username" : "GoodGuyGreg", "comment" : "What's mine is yours!", "post" : ObjectId("62a5e6185e5faf24eee7376f") }
{ "_id" : ObjectId("62a618c45e5faf24eee7377d"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("62a5e6585e5faf24eee73770") }
{ "_id" : ObjectId("62a619735e5faf24eee7377e"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("62a5e3c55e5faf24eee7376b") }
{ "_id" : ObjectId("62a61a0b5e5faf24eee7377f"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("62a5e57f5e5faf24eee7376d") }
>
> db.comments.find({"username":"GoodGuyGreg"})
{ "_id" : ObjectId("62a615ee5e5faf24eee7377b"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("62a5e5e65e5faf24eee7376e") }
{ "_id" : ObjectId("62a616b85e5faf24eee7377c"), "username" : "GoodGuyGreg", "comment" : "What's mine is yours!", "post" : ObjectId("62a5e6185e5faf24eee7376f") }
{ "_id" : ObjectId("62a618c45e5faf24eee7377d"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("62a5e6585e5faf24eee73770") }
>
> db.comments.find({"username":"ScumbagSteve"})
{ "_id" : ObjectId("62a619735e5faf24eee7377e"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("62a5e3c55e5faf24eee7376b") }
{ "_id" : ObjectId("62a61a0b5e5faf24eee7377f"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("62a5e57f5e5faf24eee7376d") }
> db.comments.find({"title":"Reports a bug in your code"})
> db.comments.find({"post": ObjectId("62a5e57f5e5faf24eee7376d")})
{ "_id" : ObjectId("62a61a0b5e5faf24eee7377f"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("62a5e57f5e5faf24eee7376d") }
>
>


































